import torch
import math
from nntrainer.trainer.am import AMGroup

def model_param_stat(model):
    cnt=0
    total=0
    for param in model.parameters():
        size=1
        for i in param.size():
            size*=i
        total+=size
        cnt+=1
    return cnt,total

def model_norm_stat(model,p):
    if not isinstance(p,list):
        p=[p]
    am=AMGroup([str(x) for x in p])
    am.reset()
    for param in model.parameters():
        size=1
        for i in param.size():
            size*=i
        for x in p:
            l=am[str(x)]+(param.norm(x).detach().cpu().item()/size,size)
    return [v for k,v in am.t_avg()]

def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Conv") != -1:
        torch.nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find("BatchNorm2d") != -1:
        torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
        torch.nn.init.constant_(m.bias.data, 0.0)

def trunc_normal(tensor, mean, std, a, b):
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor